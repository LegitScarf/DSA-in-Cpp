#include <queue>
#include <vector>
#include <map>
#include <unordered_map>
#include <list>

string bfs(vector<vector<int>>& edges,int n,int m,unordered_map<int,list<int>>&adj,
unordered_map<int, bool>& visited,unordered_map<int, int>& parent,int node){
    queue<int> q;

    q.push(node);
    visited[node] = true;
    parent[node] = -1;

    while(!q.empty()){
        int firstNode = q.front();
        q.pop();

        for(auto i:adj[firstNode]){
            if(!visited[i]){
                visited[i] = true;
                parent[i] = firstNode;
                q.push(i);
            }
            else{
                if(visited[i] && parent[firstNode] != i){
                    return "Yes";
                }
            }
        }
    }
    return "No";

}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,list<int>>adj;
    for(int i=0; i<m; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    unordered_map<int, bool> visited;
    unordered_map<int, int> parent;

    for(int i=0; i<n; i++){
        if(!visited[i]){
            string ans = bfs(edges,n,m,adj,visited,parent,i);
            if(ans == "Yes") return "Yes";
        }
    }
    return "No";
}