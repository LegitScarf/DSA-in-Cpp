class Solution {
private:
    bool check(string& s, unordered_set<string>& wordSet) {
        return wordSet.count(s) > 0;
    }

    void solve(vector<vector<char>>& board, unordered_set<string>& wordSet,
               int row, int col, string& s, vector<string>& ans,
               vector<vector<bool>>& visited, unordered_set<string>& added) {
        int m = board.size(), n = board[0].size();
        if(row < 0 || col < 0 || row >= m || col >= n || visited[row][col]) return;

        s.push_back(board[row][col]);
        visited[row][col] = true;

        if(check(s, wordSet) && !added.count(s)) {
            ans.push_back(s);
            added.insert(s);
        }

        solve(board, wordSet, row + 1, col, s, ans, visited, added);
        solve(board, wordSet, row - 1, col, s, ans, visited, added);
        solve(board, wordSet, row, col + 1, s, ans, visited, added);
        solve(board, wordSet, row, col - 1, s, ans, visited, added);

        s.pop_back();
        visited[row][col] = false;
    }

public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        int m = board.size(), n = board[0].size();
        vector<string> ans;
        unordered_set<string> wordSet(words.begin(), words.end());
        unordered_set<string> added;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        string s = "";

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                solve(board, wordSet, i, j, s, ans, visited, added);
            }
        }

        return ans;
    }
};
