#include <algorithm>

class Solution {
private:
    void solve(vector<int>& nums, vector<int>& subset, int index, vector<vector<int>>& ans){
        if(index == nums.size()){
            ans.push_back(subset);
            return;
        }

        subset.push_back(nums[index]);
        solve(nums, subset, index+1, ans);
        subset.pop_back();

        int idx = index + 1;
        while(idx < nums.size() && nums[idx] == nums[idx-1]){
            idx++;
        } 
        solve(nums, subset, idx, ans);
    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int> subset;
        vector<vector<int>> ans;
        int index = 0;
        
        sort(nums.begin(), nums.end());
        solve(nums, subset, index, ans);
        return ans;
    }
};