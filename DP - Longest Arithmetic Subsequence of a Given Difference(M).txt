class Solution {
private:
    int solve(vector<int>& arr, int diff, int index, unordered_map<int,int>& dp){
        if(dp.count(arr[index])) return dp[arr[index]];

        int maxLen = 1;
        for(int j = index + 1; j < arr.size(); j++){
            if(arr[j] - arr[index] == diff){
                maxLen = max(maxLen, 1 + solve(arr, diff, j, dp));
            }
        }
        return dp[arr[index]] = maxLen;
    }

public:
    int longestSubsequence(vector<int>& arr, int difference) {
        // int ans = 1;
        // unordered_map<int, int> dp;

        // for(int i = 0; i < arr.size(); i++){
        //     ans = max(ans, solve(arr, difference, i, dp));
        // }
        // return ans;

        // Solving using Tabulation
        
        unordered_map<int,int> dp;
        int ans = 0;
        int temp = 0;
        int tempAns = 0;

        for(int i=0; i<arr.size(); i++){
            temp = arr[i]-difference;
            tempAns = 0;
            if(dp.count(temp)){
                tempAns = dp[temp];
            }
            dp[arr[i]] = 1 + tempAns;
            ans = max(ans, dp[arr[i]]);
        }
        return ans;
    }
};