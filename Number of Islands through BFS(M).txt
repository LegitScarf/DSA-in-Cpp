class Solution {
public:
    void bfs(vector<vector<char>>& grid, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();

        queue<pair<int, int>> q;
        q.push({i, j});
        grid[i][j] = '0'; 

        int dx[] = {-1, 1, 0, 0};
        int dy[] = {0, 0, -1, 1};

        while(!q.empty()) {
            auto [x, y] = q.front();
            q.pop();

            for(int k = 0; k < 4; k++) {
                int newX = x + dx[k];
                int newY = y + dy[k];

                if(newX >= 0 && newX < m && newY >= 0 && newY < n && grid[newX][newY] == '1') {
                    q.push({newX, newY});
                    grid[newX][newY] = '0';
                }
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()) return 0;

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;

        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(grid[i][j] == '1') {
                    count++;
                    bfs(grid, i, j); 
                }
            }
        }

        return count;
    }
};
