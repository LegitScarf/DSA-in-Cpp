class Solution {
public:
    void deleteAllOccurOfX(struct Node** head_ref, int x) {
        if (*head_ref == NULL) return; // If list is empty, return
        
        Node* curr = *head_ref;

        // Deleting nodes from the head
        while (curr != NULL && curr->data == x) {
            Node* temp = curr;
            *head_ref = curr->next;  // Move head forward
            curr = curr->next;
            if (curr) curr->prev = NULL;
            delete temp;
        }

        // Traversing and deleting other occurrences
        while (curr != NULL) {
            if (curr->data == x) {
                Node* temp = curr;
                
                // Bypass the current node
                if (curr->prev) 
                    curr->prev->next = curr->next;
                
                if (curr->next)
                    curr->next->prev = curr->prev;
                
                curr = curr->next; // Move forward
                delete temp;
            } 
            else {
                curr = curr->next; // Move forward
            }
        }
    }
};
