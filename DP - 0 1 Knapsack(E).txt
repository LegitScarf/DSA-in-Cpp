#include <bits/stdc++.h> 
int solve(vector<int>& weight, vector<int>& value, int index, int maxWeight,vector<vector<int>>&dp){
	if(index == 0) return (weight[0] <= maxWeight) ? value[0] : 0;

	if(dp[index][maxWeight] != -1) return dp[index][maxWeight];

	int include = 0;
	if(weight[index] <= maxWeight){
		include = solve(weight, value, index-1, maxWeight-weight[index], dp) + value[index];
	}
	int exclude = solve(weight, value, index-1, maxWeight, dp);

	dp[index][maxWeight] = max(include, exclude);
	return dp[index][maxWeight];
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{ 
	vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
	return solve(weight, value, n-1, maxWeight, dp);
}