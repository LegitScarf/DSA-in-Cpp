class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        nums1.resize(n+m);
        vector<int> nums3(nums1.begin(), nums1.begin() + m);

        int i = 0;
        int j = 0;
        int k = 0;

        for(int z=0; z<m; z++ ){
            nums3[z] = nums1[z];
        }

        while(i<m && j<n){
            if(nums3[i]<nums2[j]){
                nums1[k++] = nums3[i++];
            }
            else{
                nums1[k++] = nums2[j++];
            }
        }

        while(i<m){
            nums1[k++] = nums3[i++];
        }

        while(j<n){
            nums1[k++] = nums2[j++];
        }
        
    }
};


2nd approach: Backwards from the largest element. By starting from the end, we avoid overwriting elements that are yet to be merged.

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // Start merging from the end of nums1
        int i = m - 1;  // Pointer for the last element in the original nums1
        int j = n - 1;  // Pointer for the last element in nums2
        int k = m + n - 1;  // Pointer for the last position in the merged array

        // Merge in reverse order
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // If there are remaining elements in nums2, copy them
        // (No need to check nums1 since they are already in place)
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }
};
