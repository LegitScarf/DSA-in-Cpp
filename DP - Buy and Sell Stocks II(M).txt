class Solution {
private:
    int solveMem(int index, int buy, vector<int>& prices, vector<vector<int>>&dp){
        if(index == prices.size()) return 0;
        //if(limit == 0) return 0;
        
        if(dp[index][buy] != -1) return dp[index][buy];
        int profit = 0;
        if(buy){
            int buyKaro = -prices[index] + solveMem(index+1,0,prices,dp);
            int skipKaro = solveMem(index+1,1,prices,dp);
            profit = max(buyKaro, skipKaro);
        }
        else{
            int sellKaro = prices[index] + solveMem(index+1,1,prices,dp);
            int skipKaro = solveMem(index+1,0,prices,dp);
            profit = max(sellKaro,skipKaro);
        }
        return dp[index][buy] = profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,-1));
        return solveMem(0,1,prices,dp);
    }
};
