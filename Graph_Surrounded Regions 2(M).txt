class Solution {
private:
    /*void bfs(vector<vector<char>>& board, int i, int j){
        int m = board.size();
        int n = board[0].size();

        queue<pair<int, int>> q;
        board[i][j] = 'T';
        q.push({i,j});

        int dx[] = {-1,1,0,0};
        int dy[] = {0,0,-1,1};

        while(!q.empty()){
            auto [x,y] = q.front();
            q.pop();

            for(int k=0; k<4; k++){
                int newX = x + dx[k];
                int newY = y + dy[k];

                if(newX >= 0 && newX < m && newY >= 0 && newY < n && board[newX][newY] == 'O'){
                    board[newX][newY] = 'T';
                    q.push({newX, newY});
                }
            }
        }
    }*/
    void dfs(vector<vector<char>>& board, int i, int j) {
        int m = board.size();
        int n = board[0].size();

        if(i < 0 || i >= m || j < 0 || j >= n || board[i][j] != 'O')
            return;

        board[i][j] = 'T'; 

        dfs(board, i - 1, j); 
        dfs(board, i + 1, j); 
        dfs(board, i, j - 1);
        dfs(board, i, j + 1);
    }

public:
    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;

        int m = board.size();
        int n = board[0].size();
        
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O') dfs(board, i, 0);
            if(board[i][n - 1] == 'O') dfs(board, i, n - 1);
        }

        for(int j = 0; j < n; j++){
            if(board[0][j] == 'O') dfs(board, 0, j);
            if(board[m - 1][j] == 'O') dfs(board, m - 1, j);
        }

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 'T') board[i][j] = 'O'; 
                else if(board[i][j] == 'O') board[i][j] = 'X'; 
            }
        }
    }
};
