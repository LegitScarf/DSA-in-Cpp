class Solution {
private:
    void insertAtTail(Node* &head, Node* &tail, int d){
        Node* newNode = new Node(d);
        if(head == NULL){
            head = newNode;
            tail = newNode;
        }
        else{
            tail->next = newNode;
            tail = newNode;
        }
    }
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;

        //step 1: Clone the linkedlist
        while(temp != NULL){
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp = temp->next;
        }

        //Step 2: Change the links
        Node* temp1 = head;
        Node* temp2 = cloneHead;
        Node* forward1 = NULL;
        Node* forward2 = NULL;

        while(temp1 != NULL && temp2 != NULL){
            forward1 = temp1->next;
            temp1->next = temp2;
            temp1 = forward1;

            forward2 = temp2->next;
            temp2->next = temp1;
            temp2 = forward2;

        }

        //step 3:Adjust the random ptr

        temp1 = head;
        temp2 = cloneHead;

        while(temp1 != NULL && temp2 != NULL){
            if(temp1->next != NULL){
                temp1->next->random = temp1->random ? temp1->random->next : temp1->random;

            }
        
            temp1 = temp1->next->next;
        }
        
        //step 4: Undo all of the link chnages
        temp1 = head;
        temp2 = cloneHead;

        while(temp1 != NULL && temp2 != NULL){
            temp1->next = temp2->next;
            temp1 = temp1->next;

            if(temp1 != NULL){
                temp2->next = temp1->next;
            }
            temp2 = temp2->next;
        }

        return cloneHead;
     

    }
};