#include<list>
#include<map>
#include<vector>

bool dfs(int node,unordered_map<int,list<int>>& adj,unordered_map<int, bool>& vis,unordered_map<int, bool>& dfsVis)
{
  vis[node] = true;
  dfsVis[node] = true;

  for(int neighbour:adj[node]){
    if(!vis[neighbour]){
      bool cyclePresent = dfs(neighbour,adj,vis,dfsVis);
      if(cyclePresent) return true;
    }
    if(dfsVis[neighbour]) return true;
  }
  dfsVis[node] = false;
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int,list<int>> adj;
  for(int i=0; i<edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  unordered_map<int, bool> vis;
  unordered_map<int, bool> dfsVis;
  bool ans;
  
  for(int i=0; i<n; i++){
    if(!vis[i]){
      ans = dfs(i,adj,vis,dfsVis);
      if(ans == 1) return 1;
    }
  }
  return 0;
}