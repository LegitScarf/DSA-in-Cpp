class Solution {
private:
    int solve(vector<int>& arr, map<pair<int,int>, int> &maxi, int left, int right){
        if(left == right) return 0;
        
        int ans = INT_MAX;
        for(int k=left; k<right; k++){
            ans = min(ans, maxi[{left,k}]*maxi[{k+1,right}] + solve(arr,maxi,left,k) + solve(arr,maxi,k+1,right));
        }
        return ans;
    }
    int solveMem(vector<int>& arr, vector<vector<int>>& maxi, int left, int right, vector<vector<int>>& dp) {
        if (left == right) return 0;

        if (dp[left][right] != -1) return dp[left][right];

        int ans = INT_MAX;
        for (int k = left; k < right; ++k) {
            int leftCost = solveMem(arr, maxi, left, k, dp);
            int rightCost = solveMem(arr, maxi, k + 1, right, dp);
            int rootVal = maxi[left][k] * maxi[k + 1][right];
            ans = min(ans, rootVal + leftCost + rightCost);
        }

        return dp[left][right] = ans;
    }
public:
    int mctFromLeafValues(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        vector<vector<int>> maxi(n, vector<int>(n, 0));

        for (int i = 0; i < n; ++i) {
            maxi[i][i] = arr[i];
            for (int j = i + 1; j < n; ++j) {
                maxi[i][j] = max(maxi[i][j - 1], arr[j]);
            }
        }

        return solveMem(arr, maxi, 0, n - 1, dp);
    }
};