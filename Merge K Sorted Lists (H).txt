/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
#include <algorithm>
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //Traverse each list and put it in an array
        vector<int> arr;

        for(int i=0; i<lists.size(); i++){
            ListNode* temp = lists[i];
            while(temp){
                // if(temp != NULL){
                    arr.push_back(temp->val);
                    temp = temp->next;
                // } 
            }
        }

        //Sort the array
        sort(arr.begin(), arr.end());

        //convert the array to linked list
        ListNode* dummyNode = new ListNode(0);
        ListNode* head = dummyNode;
        ListNode* tail = dummyNode;

        for(int i=0; i<arr.size(); i++){
            int element = arr[i];
            tail->next = new ListNode(element);
            tail = tail->next;
        }

        return head->next;
    }
};