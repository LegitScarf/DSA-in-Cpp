class Solution {
  private:
    bool isSafe(int x, int y, vector<vector<int>> &visited, int n, vector<vector<int>> &mat) {
        return (x >= 0 && x < n) && (y >= 0 && y < n) && visited[x][y] == 0 && mat[x][y] == 1;
    }
    
    void solve(vector<vector<int>> &mat, vector<string> &ans, string path,
               vector<vector<int>> &visited, int x, int y, int n) {
        // Base case: if the destination is reached
        if (x == n - 1 && y == n - 1) {
            ans.push_back(path);
            return;
        }
        
        // Mark the current cell as visited
        visited[x][y] = 1;
        
        // Move Down
        int newx = x + 1;
        int newy = y;
        if (isSafe(newx, newy, visited, n, mat)) {
            path += 'D';
            solve(mat, ans, path, visited, newx, newy, n);
            path.pop_back();
        }
        
        // Move Up
        newx = x - 1;
        newy = y;
        if (isSafe(newx, newy, visited, n, mat)) {
            path += 'U';
            solve(mat, ans, path, visited, newx, newy, n);
            path.pop_back();
        }
        
        // Move Left
        newx = x;
        newy = y - 1;
        if (isSafe(newx, newy, visited, n, mat)) {
            path += 'L';
            solve(mat, ans, path, visited, newx, newy, n);
            path.pop_back();
        }
        
        // Move Right
        newx = x;
        newy = y + 1;
        if (isSafe(newx, newy, visited, n, mat)) {
            path += 'R';
            solve(mat, ans, path, visited, newx, newy, n);
            path.pop_back();
        }
        
        // Backtrack: unmark the current cell
        visited[x][y] = 0;
    }

  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> ans;
        int n = mat.size();
        if (n == 0 || mat[0][0] == 0 || mat[n-1][n-1] == 0) return ans;

        string path = "";
        vector<vector<int>> visited(n, vector<int>(n, 0));
        solve(mat, ans, path, visited, 0, 0, n);
        
        return ans;
    }
};