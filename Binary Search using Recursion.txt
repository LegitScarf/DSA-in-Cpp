int binarySearchHelper(vector<int>& nums, int target, int start, int end) {
    if (start > end) {
        return -1; // Base case: target not found
    }

    int mid = start + (end - start) / 2; // Calculate middle index

    if (nums[mid] == target) {
        return mid; // Target found
    } else if (nums[mid] > target) {
        return binarySearchHelper(nums, target, start, mid - 1); // Search left half
    } else {
        return binarySearchHelper(nums, target, mid + 1, end); // Search right half
    }
}

int search(vector<int> &nums, int target) {
    return binarySearchHelper(nums, target, 0, nums.size() - 1);
}