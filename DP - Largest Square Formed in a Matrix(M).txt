class Solution {
  private:
    int solve(vector<vector<int>>& mat, int i, int j, int& maxi,
    vector<vector<int>>& dp) {
        if (i >= mat.size() || j >= mat[0].size()) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int right = solve(mat, i, j + 1, maxi,dp);
        int down = solve(mat, i + 1, j, maxi,dp);
        int diagonal = solve(mat, i + 1, j + 1, maxi,dp);

        //int ans = 0;
        if (mat[i][j] == 1) {
            dp[i][j] = 1 + min({right, down, diagonal});
            maxi = max(maxi, dp[i][j]);
            return dp[i][j];
        }

        else return dp[i][j]=0;
    }

  public:
    int maxSquare(vector<vector<int>>& mat) {
        vector<vector<int>> dp(mat.size(), vector<int>(mat[0].size(),-1));
        int maxi = 0;

        // Explore from every cell (not just (0,0))
        for (int i=0; i < mat.size(); i++) {
            for (int j=0; j < mat[0].size(); j++) {
                solve(mat,i,j,maxi,dp);
            }
        }

        return maxi;
        
    }
};